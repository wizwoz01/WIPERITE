<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\WIPERITE-TM4C123.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\WIPERITE-TM4C123.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6240002: Last Updated: Sun Oct 26 21:41:39 2025
<BR><P>
<H3>Maximum Stack Usage =        712 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7d]">fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">fillmessage</a><BR>
 <LI><a href="#[9]">UART_OutUDec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UART_OutUDec</a><BR>
 <LI><a href="#[24]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">SysCtlDelay</a><BR>
 <LI><a href="#[40]">Crash</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">Crash</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">Car_Delay</a> from motor.o(.text.Car_Delay) referenced from motor.o(.text.Car_ProcessCommand)
 <LI><a href="#[12]">Delay1ms</a> from st7735.o(.text.Delay1ms) referenced from st7735.o(.text.commonInit)
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">GPIOB_intHandler</a> from board.o(.text.GPIOB_intHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[19]">GPIOPinConfigure</a> from gpio.o(i.GPIOPinConfigure) referenced from spi.o(.text.spi_Open)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 112 times from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">PWM_Duty</a> from pwm.o(.text.PWM_Duty) referenced from motor.o(.text.Car_ProcessCommand)
 <LI><a href="#[0]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">ST7735_OutChar</a> from st7735.o(.text.ST7735_OutChar) referenced from main.o(.text.SimpleLinkNetAppEventHandler)
 <LI><a href="#[c]">ST7735_OutChar</a> from st7735.o(.text.ST7735_OutChar) referenced from main.o(.text.main)
 <LI><a href="#[14]">ST7735_OutString</a> from st7735.o(.text.ST7735_OutString) referenced from main.o(.text.main)
 <LI><a href="#[b]">ST7735_OutUDec</a> from st7735.o(.text.ST7735_OutUDec) referenced from main.o(.text.SimpleLinkNetAppEventHandler)
 <LI><a href="#[b]">ST7735_OutUDec</a> from st7735.o(.text.ST7735_OutUDec) referenced from main.o(.text.main)
 <LI><a href="#[13]">ST7735_SetCursor</a> from st7735.o(.text.ST7735_SetCursor) referenced from main.o(.text.main)
 <LI><a href="#[e]">SimpleLinkNetAppEventHandler</a> from main.o(.text.SimpleLinkNetAppEventHandler) referenced from driver.o(.text._SlDrvClassifyRxMsg)
 <LI><a href="#[f]">SimpleLinkWlanEventHandler</a> from main.o(.text.SimpleLinkWlanEventHandler) referenced from driver.o(.text._SlDrvClassifyRxMsg)
 <LI><a href="#[18]">SysCtlPeripheralEnable</a> from sysctl.o(i.SysCtlPeripheralEnable) referenced from spi.o(.text.spi_Open)
 <LI><a href="#[5]">UARTStdioIntHandler</a> from uartstdio.o(.text.UARTStdioIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">UART_OutChar</a> from uart0.o(.text.UART_OutChar) referenced from main.o(.text.SimpleLinkNetAppEventHandler)
 <LI><a href="#[9]">UART_OutUDec</a> from uart0.o(.text.UART_OutUDec) referenced from main.o(.text.SimpleLinkNetAppEventHandler)
 <LI><a href="#[10]">_SlDrvDeviceEventHandler</a> from device.o(.text._SlDrvDeviceEventHandler) referenced from driver.o(.text._SlDrvClassifyRxMsg)
 <LI><a href="#[11]">_SlDrvMsgReadSpawnCtx</a> from driver.o(.text._SlDrvMsgReadSpawnCtx) referenced from driver.o(.text._SlDrvMsgReadCmdCtx)
 <LI><a href="#[11]">_SlDrvMsgReadSpawnCtx</a> from driver.o(.text._SlDrvMsgReadSpawnCtx) referenced from driver.o(.text._SlDrvRxIrqHandler)
 <LI><a href="#[d]">_SlDrvNetAppEventHandler</a> from netapp.o(.text._SlDrvNetAppEventHandler) referenced from driver.o(.text._SlDrvClassifyRxMsg)
 <LI><a href="#[17]">_SlDrvRxIrqHandler</a> from driver.o(.text._SlDrvRxIrqHandler) referenced from device.o(.text.sl_Start)
 <LI><a href="#[1a]">_sl_HandleAsync_Accept</a> from socket.o(.text._sl_HandleAsync_Accept) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[1b]">_sl_HandleAsync_Connect</a> from socket.o(.text._sl_HandleAsync_Connect) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[1d]">_sl_HandleAsync_DnsGetHostByName</a> from netapp.o(.text._sl_HandleAsync_DnsGetHostByName) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[1e]">_sl_HandleAsync_DnsGetHostByService</a> from netapp.o(.text._sl_HandleAsync_DnsGetHostByService) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[1f]">_sl_HandleAsync_PingResponse</a> from netapp.o(.text._sl_HandleAsync_PingResponse) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[1c]">_sl_HandleAsync_Select</a> from socket.o(.text._sl_HandleAsync_Select) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[20]">_sl_HandleAsync_Stop</a> from device.o(.text._sl_HandleAsync_Stop) referenced from driver.o(.rodata._SlActionLookupTable)
 <LI><a href="#[6]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[15]">writecommand</a> from st7735.o(.text.writecommand) referenced from st7735.o(.text.setAddrWindow)
 <LI><a href="#[16]">writedata</a> from st7735.o(.text.writedata) referenced from st7735.o(.text.setAddrWindow)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[d4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[24]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>

<P><STRONG><a name="[da]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[db]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[d3]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[dc]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[dd]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[de]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Delay
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Delay
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[29]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>CC3100_InterruptDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(.text.CC3100_InterruptDisable))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
</UL>

<P><STRONG><a name="[31]"></a>CC3100_InterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(.text.CC3100_InterruptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[33]"></a>CC3100_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(.text.CC3100_disable))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[35]"></a>CC3100_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(.text.CC3100_enable))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[45]"></a>Car_Dir_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, gpio.o(.text.Car_Dir_Init))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
</UL>

<P><STRONG><a name="[36]"></a>Car_ProcessCommand</STRONG> (Thumb, 1016 bytes, Stack size 56 bytes, motor.o(.text.Car_ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Car_ProcessCommand &rArr; Car_Delay &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Duty
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Delay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>Crash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Crash))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RedToggle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>

<P><STRONG><a name="[12]"></a>Delay1ms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, st7735.o(.text.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text.commonInit)
</UL>
<P><STRONG><a name="[4]"></a>GPIOB_intHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board.o(.text.GPIOB_intHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOB_intHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>GetStartResponseConvert</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, device.o(.text.GetStartResponseConvert))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[bf]"></a>LED_GreenOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text.LED_GreenOff))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>LED_GreenOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(.text.LED_GreenOn))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>LED_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(.text.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>LED_RedToggle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(.text.LED_RedToggle))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>

<P><STRONG><a name="[44]"></a>MotorControl_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motor.o(.text.MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorControl_Init &rArr; PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortF_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Dir_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>PWM_Duty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text.PWM_Duty))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.Car_ProcessCommand)
</UL>
<P><STRONG><a name="[46]"></a>PWM_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
</UL>

<P><STRONG><a name="[47]"></a>PortF_Init</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, gpio.o(.text.PortF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PortF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
</UL>

<P><STRONG><a name="[59]"></a>ST7735_DrawCharS</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, st7735.o(.text.ST7735_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[75]"></a>ST7735_DrawPixel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[78]"></a>ST7735_DrawString</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, st7735.o(.text.ST7735_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
</UL>

<P><STRONG><a name="[74]"></a>ST7735_FillRect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
</UL>

<P><STRONG><a name="[79]"></a>ST7735_FillScreen</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>ST7735_InitR</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, st7735.o(.text.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>ST7735_OutChar</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.main)
<LI> main.o(.text.SimpleLinkNetAppEventHandler)
</UL>
<P><STRONG><a name="[14]"></a>ST7735_OutString</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(.text.ST7735_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkNetAppEventHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[b]"></a>ST7735_OutUDec</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST7735_OutUDec &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.main)
<LI> main.o(.text.SimpleLinkNetAppEventHandler)
</UL>
<P><STRONG><a name="[13]"></a>ST7735_SetCursor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7735.o(.text.ST7735_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[c0]"></a>ST7735_SetTextColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st7735.o(.text.ST7735_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>SimpleLinkHttpServerCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SimpleLinkHttpServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleLinkHttpServerCallback &rArr; UART_OutString
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[e]"></a>SimpleLinkNetAppEventHandler</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, main.o(.text.SimpleLinkNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SimpleLinkNetAppEventHandler &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[f]"></a>SimpleLinkWlanEventHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, main.o(.text.SimpleLinkWlanEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleLinkWlanEventHandler &rArr; UART_OutUDec &rArr;  UART_OutUDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[ab]"></a>SysTick_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(.text.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>SysTick_Wait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, systick.o(.text.SysTick_Wait))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[5]"></a>UARTStdioIntHandler</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, uartstdio.o(.text.UARTStdioIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UARTStdioIntHandler &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>UART_Init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, uart0.o(.text.UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>UART_OutChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart0.o(.text.UART_OutChar))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.SimpleLinkNetAppEventHandler)
</UL>
<P><STRONG><a name="[37]"></a>UART_OutString</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart0.o(.text.UART_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_OutString
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkNetAppEventHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>UART_OutUDec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart0.o(.text.UART_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = UART_OutUDec &rArr;  UART_OutUDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.SimpleLinkNetAppEventHandler)
</UL>
<P><STRONG><a name="[80]"></a>UARTwrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uartstdio.o(.text.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[82]"></a>_SlAsyncEventGenericHandler</STRONG> (Thumb, 536 bytes, Stack size 112 bytes, driver.o(.text._SlAsyncEventGenericHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
</UL>

<P><STRONG><a name="[86]"></a>_SlDrvBasicCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, driver.o(.text._SlDrvBasicCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
</UL>

<P><STRONG><a name="[97]"></a>_SlDrvClassifyRxMsg</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, driver.o(.text._SlDrvClassifyRxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[51]"></a>_SlDrvCmdOp</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, driver.o(.text._SlDrvCmdOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[8a]"></a>_SlDrvCmdSend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, driver.o(.text._SlDrvCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
</UL>

<P><STRONG><a name="[8b]"></a>_SlDrvDataReadOp</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, driver.o(.text._SlDrvDataReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _SlDrvDataReadOp &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
</UL>

<P><STRONG><a name="[8e]"></a>_SlDrvDataWriteOp</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, driver.o(.text._SlDrvDataWriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[10]"></a>_SlDrvDeviceEventHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(.text._SlDrvDeviceEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _SlDrvDeviceEventHandler &rArr; _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[90]"></a>_SlDrvDriverCBDeinit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, driver.o(.text._SlDrvDriverCBDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlDrvDriverCBDeinit &rArr; _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[92]"></a>_SlDrvDriverCBInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, driver.o(.text._SlDrvDriverCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SlDrvDriverCBInit &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[91]"></a>_SlDrvFlowContDeinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flowcont.o(.text._SlDrvFlowContDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
</UL>

<P><STRONG><a name="[94]"></a>_SlDrvFlowContInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flowcont.o(.text._SlDrvFlowContInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[95]"></a>_SlDrvMsgRead</STRONG> (Thumb, 776 bytes, Stack size 40 bytes, driver.o(.text._SlDrvMsgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlFindAndSetActiveObj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvClassifyRxMsg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
</UL>

<P><STRONG><a name="[89]"></a>_SlDrvMsgReadCmdCtx</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, driver.o(.text._SlDrvMsgReadCmdCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[11]"></a>_SlDrvMsgReadSpawnCtx</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, driver.o(.text._SlDrvMsgReadSpawnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _SlDrvMsgReadSpawnCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(.text._SlDrvMsgReadCmdCtx)
<LI> driver.o(.text._SlDrvRxIrqHandler)
</UL>
<P><STRONG><a name="[88]"></a>_SlDrvMsgWrite</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, driver.o(.text._SlDrvMsgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[d]"></a>_SlDrvNetAppEventHandler</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, netapp.o(.text._SlDrvNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _SlDrvNetAppEventHandler &rArr; sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.text._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[93]"></a>_SlDrvObjInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, driver.o(.text._SlDrvObjInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvObjInit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[8d]"></a>_SlDrvReleasePoolObj</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, driver.o(.text._SlDrvReleasePoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlRemoveFromList
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[96]"></a>_SlDrvRxHdrRead</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, driver.o(.text._SlDrvRxHdrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SlDrvRxHdrRead &rArr; spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvShiftDWord
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[17]"></a>_SlDrvRxIrqHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, driver.o(.text._SlDrvRxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SlDrvRxIrqHandler &rArr; _SlNonOsSpawn
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.text.sl_Start)
</UL>
<P><STRONG><a name="[9f]"></a>_SlDrvShiftDWord</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver.o(.text._SlDrvShiftDWord))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
</UL>

<P><STRONG><a name="[8c]"></a>_SlDrvWaitForPoolObj</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, driver.o(.text._SlDrvWaitForPoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvWaitForPoolObj &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[98]"></a>_SlFindAndSetActiveObj</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, driver.o(.text._SlFindAndSetActiveObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SlFindAndSetActiveObj
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[a0]"></a>_SlNonOsMainLoopTask</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nonos.o(.text._SlNonOsMainLoopTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[4e]"></a>_SlNonOsSemGet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nonos.o(.text._SlNonOsSemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[49]"></a>_SlNonOsSemSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nonos.o(.text._SlNonOsSemSet))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[9c]"></a>_SlNonOsSpawn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nonos.o(.text._SlNonOsSpawn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlNonOsSpawn
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
</UL>

<P><STRONG><a name="[9e]"></a>_SlRemoveFromList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, driver.o(.text._SlRemoveFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlRemoveFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>

<P><STRONG><a name="[c1]"></a>_sl_BuildAddress</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, socket.o(.text._sl_BuildAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
</UL>

<P><STRONG><a name="[1a]"></a>_sl_HandleAsync_Accept</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, socket.o(.text._sl_HandleAsync_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Accept &rArr; OUTLINED_FUNCTION_0 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[1b]"></a>_sl_HandleAsync_Connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, socket.o(.text._sl_HandleAsync_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Connect &rArr; OUTLINED_FUNCTION_0 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[1d]"></a>_sl_HandleAsync_DnsGetHostByName</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, netapp.o(.text._sl_HandleAsync_DnsGetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_DnsGetHostByName &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[1e]"></a>_sl_HandleAsync_DnsGetHostByService</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, netapp.o(.text._sl_HandleAsync_DnsGetHostByService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sl_HandleAsync_DnsGetHostByService
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[8f]"></a>_sl_HandleAsync_InitComplete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(.text._sl_HandleAsync_InitComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>

<P><STRONG><a name="[1f]"></a>_sl_HandleAsync_PingResponse</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, netapp.o(.text._sl_HandleAsync_PingResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[1c]"></a>_sl_HandleAsync_Select</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, socket.o(.text._sl_HandleAsync_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Select &rArr; OUTLINED_FUNCTION_0 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[20]"></a>_sl_HandleAsync_Stop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(.text._sl_HandleAsync_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Stop &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.rodata._SlActionLookupTable)
</UL>
<P><STRONG><a name="[6d]"></a>_sl_TruncatePayloadByProtocol</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, socket.o(.text._sl_TruncatePayloadByProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[7d]"></a>fillmessage</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7735.o(.text.fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[a5]"></a>initClk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(.text.initClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initClk &rArr; SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>main</STRONG> (Thumb, 1532 bytes, Stack size 136 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = main &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetTextColor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Listen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GreenOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GreenOn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_nonblocking
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c4]"></a>registerInterruptHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(.text.registerInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[ba]"></a>sl_Accept</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, socket.o(.text.sl_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sl_Accept &rArr; OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>sl_Bind</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, socket.o(.text.sl_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sl_Bind &rArr; OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>sl_Close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, socket.o(.text.sl_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_Close &rArr; OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>sl_DevGet</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, device.o(.text.sl_DevGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sl_DevGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>sl_Htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, socket.o(.text.sl_Htons))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>sl_Listen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, socket.o(.text.sl_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_Listen &rArr; OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>sl_NetAppMDNSRegisterUnregisterService</STRONG> (Thumb, 120 bytes, Stack size 312 bytes, netapp.o(.text.sl_NetAppMDNSRegisterUnregisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
</UL>

<P><STRONG><a name="[b2]"></a>sl_NetAppMDNSUnRegisterService</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, netapp.o(.text.sl_NetAppMDNSUnRegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>sl_NetAppSendTokenValue</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, netapp.o(.text.sl_NetAppSendTokenValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[b0]"></a>sl_NetCfgSet</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, netcfg.o(.text.sl_NetCfgSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sl_NetCfgSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>sl_Recv</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, socket.o(.text.sl_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sl_Recv &rArr; _SlDrvDataReadOp &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>sl_Send</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, socket.o(.text.sl_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sl_Send &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>sl_SetSockOpt</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, socket.o(.text.sl_SetSockOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sl_SetSockOpt &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_nonblocking
</UL>

<P><STRONG><a name="[b5]"></a>sl_Socket</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, socket.o(.text.sl_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_Socket &rArr; OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>sl_Start</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, device.o(.text.sl_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_Start &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[66]"></a>sl_Stop</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, device.o(.text.sl_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sl_Stop &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[b3]"></a>sl_WlanConnect</STRONG> (Thumb, 384 bytes, Stack size 224 bytes, wlan.o(.text.sl_WlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = sl_WlanConnect &rArr; OUTLINED_FUNCTION_0 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>sl_WlanDisconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wlan.o(.text.sl_WlanDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_WlanDisconnect &rArr; _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>sl_WlanPolicySet</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wlan.o(.text.sl_WlanPolicySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sl_WlanPolicySet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[ae]"></a>sl_WlanProfileDel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wlan.o(.text.sl_WlanProfileDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_WlanProfileDel &rArr; OUTLINED_FUNCTION_0 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>sl_WlanSet</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wlan.o(.text.sl_WlanSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sl_WlanSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>sl_WlanSetMode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wlan.o(.text.sl_WlanSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sl_WlanSetMode &rArr; OUTLINED_FUNCTION_0 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>spi_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text.spi_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[c3]"></a>spi_Open</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, spi.o(.text.spi_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_Open &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[69]"></a>spi_Read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, spi.o(.text.spi_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[6f]"></a>spi_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, spi.o(.text.spi_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[a6]"></a>FPUEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[a7]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[d2]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[43]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_intHandler
</UL>

<P><STRONG><a name="[30]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>

<P><STRONG><a name="[32]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
</UL>

<P><STRONG><a name="[42]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_intHandler
</UL>

<P><STRONG><a name="[cd]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[cc]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[19]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text.spi_Open)
</UL>
<P><STRONG><a name="[cb]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[c6]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[c7]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[34]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>

<P><STRONG><a name="[ce]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[cf]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[c9]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[d1]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>

<P><STRONG><a name="[d0]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>

<P><STRONG><a name="[ca]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[c8]"></a>SysCtlClockGet</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a8]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[18]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.text.spi_Open)
</UL>
<P><STRONG><a name="[e7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[54]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>

<P><STRONG><a name="[67]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>

<P><STRONG><a name="[48]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, device.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>

<P><STRONG><a name="[5e]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[5f]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[87]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
</UL>

<P><STRONG><a name="[72]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
</UL>

<P><STRONG><a name="[9b]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
</UL>

<P><STRONG><a name="[6e]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>

<P><STRONG><a name="[70]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[5c]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>

<P><STRONG><a name="[60]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>

<P><STRONG><a name="[6b]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>

<P><STRONG><a name="[55]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
</UL>

<P><STRONG><a name="[68]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[99]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[9a]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[61]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[4a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[83]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[71]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[5d]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[84]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>

<P><STRONG><a name="[4c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, netapp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>

<P><STRONG><a name="[56]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netapp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>

<P><STRONG><a name="[6a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socket.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Listen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
</UL>

<P><STRONG><a name="[6c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, socket.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[4d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, socket.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
</UL>

<P><STRONG><a name="[64]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, socket.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
</UL>

<P><STRONG><a name="[57]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, socket.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
</UL>

<P><STRONG><a name="[4f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wlan.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>

<P><STRONG><a name="[7b]"></a>commonInit</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, st7735.o(.text.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[a2]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st7735.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[7c]"></a>commandList</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, st7735.o(.text.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[15]"></a>writecommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, st7735.o(.text.writecommand))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text.setAddrWindow)
</UL>
<P><STRONG><a name="[16]"></a>writedata</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st7735.o(.text.writedata))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735.o(.text.setAddrWindow)
</UL>
<P><STRONG><a name="[76]"></a>setAddrWindow</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, st7735.o(.text.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>

<P><STRONG><a name="[77]"></a>pushColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st7735.o(.text.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[58]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, st7735.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
</UL>

<P><STRONG><a name="[81]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uartstdio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>

<P><STRONG><a name="[7f]"></a>UARTPrimeTransmit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uartstdio.o(.text.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPrimeTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>

<P><STRONG><a name="[65]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; sl_Stop &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; sl_Start &rArr; _SlDrvReleasePoolObj &rArr; OUTLINED_FUNCTION_10 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; sl_WlanPolicySet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>socket_set_nonblocking</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.socket_set_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = socket_set_nonblocking &rArr; sl_SetSockOpt &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; OUTLINED_FUNCTION_1 &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Duty
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl_Init
</UL>

<P><STRONG><a name="[39]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[3a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[3b]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[8]"></a>Car_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motor.o(.text.Car_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Car_Delay &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.Car_ProcessCommand)
</UL>
<P><STRONG><a name="[3c]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[3d]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[3e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[3f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motor.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_ProcessCommand
</UL>

<P><STRONG><a name="[73]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pwm.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
